name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    - name: Run tests
      run: |
        pytest
    - name: Test as pre-commit hook
      run: |
        mkdir -p test_repo && cd test_repo
        git init
        git config --local user.email "hartjoost@gmail.com"
        git config --local user.name "Joost 't Hart"
        
        # Create pre-commit config with verbose mode
        cat > .pre-commit-config.yaml << EOF
        repos:
        -   repo: $(pwd)/..
            rev: main
            hooks:
            -   id: mypy-committed
                verbose: true
        EOF
        
        # Install pre-commit
        pre-commit install
        
        # Test with a good file (should pass)
        cp ../docs/examples/good_file.py good.py
        git add good.py .pre-commit-config.yaml
        git commit -m "Add good file"
        
        # Test with a bad file (should fail)
        cp ../docs/examples/bad_file.py bad.py
        git add bad.py
        
        # Print debug info
        echo "=== Files staged for commit ==="
        git diff --cached --name-only
        
        echo "=== Running mypy directly on bad.py ==="
        python -m mypy bad.py || true
        
        echo "=== Running the pre-commit hook ==="
        ! git commit -m "Add bad file"  # This should fail 